from .model import *
from .utils import datetime_decoder
from .utils import discriminator_decoder
from dataclasses import dataclass
from dataclasses import field
from datetime import date
from datetime import datetime
from datetime import time
from enum import Enum
from http_server_base.auth import *
from http_server_base.model.filtering_json_encoder import FilteringJsonEncoder
from http_server_base.model.iencoder import IEncoder
from http_server_base.tools.filters import filter_out_smart
from http_server_base.tools.logging import RequestLogger
from http_server_base.tools.subrequest_classes import HttpSubrequest
from tornado.httpclient import HTTPRequest
from typing import *
from urllib.parse import ParseResult
from urllib.parse import urlparse
from lib.oauth2 import OAuth2AuthProvider

class FuelStatusApiClientServers(Enum):
    """ Enum-container of default servers used for `FuelStatusApiClient` """
    
    HttpsApiMercedesBenzComVehicledataV2 = 'https://api.mercedes-benz.com/vehicledata/v2'

class FuelStatusApiClient(AuthorizedClient):
    """
    This API allows to determine the fuel level and remaining distance of connected Mercedes-Benz
    vehicles remotely.
    
    Data is categorized into resources and containers for the polling interface. They are defined
    as follows:
    
    * *Resource*: A resource is a single information about a vehicle. It's a measurement that
    consists of a name (also referred to as resource ID), a value, and an associated timestamp. See
    below for a list and description of all resources that this API provides.
    
    * *Container*: A container is a set of resources that are defined to group data for a certain
    use case.
    
    The interface is a ISO 20078-compliant REST endpoint to query the latest data for a vehicle. If
    the vehicle did not send an update for a resource within 12 hours, the response will be empty.
    
    ## Resources
    
    This is an alphabetical list of all resources that the API provides.
    
    Name | Description | Unit/Range
    
    ---- | ----------- | ----------
    
    rangeliquid | Liquid fuel tank range | 0..2046 km
    
    tanklevelpercent | Liquid fuel tank level | 0â€¦100 %
    
    Meta:
         - Generated by Python OpenAPI Parser
    """
    
    server: Union[FuelStatusApiClientServers, str]
    logger_name: str = 'FuelStatus.client'
    model_encoder: Type[IEncoder] = FilteringJsonEncoder
    
    def __init__(self, server: Union[FuelStatusApiClientServers, str] = FuelStatusApiClientServers.HttpsApiMercedesBenzComVehicledataV2):
        if (isinstance(server, FuelStatusApiClientServers)):
            server = server.value
        
        super().__init__()
        self.server = server
        # self.initialize_logger()
        # self.logger = None #RequestLogger(None, self.logger)
        
    
    # region Utility Methods
    async def _fetch__form_request(self, request: Union[str, HTTPRequest, HttpSubrequest], **kwargs) -> HttpSubrequest:
        request = await super()._fetch__form_request(request, **kwargs)
        request = await self._fetch__form_request__add_server(request)
        return request
    
    async def _fetch__form_request__add_server(self, request: HttpSubrequest) -> HttpSubrequest:
        parsed: ParseResult = urlparse(request.url)
        if (not parsed.hostname):
            request.url = self.server + request.url
        
        return request
    
    # endregion
    # region Authorization Methods
    async def provide_o_auth2_authorization(self, scopes, redirect_uri, client_id, client_secret):
        provider = OAuth2AuthProvider(
            auth_service='https://id.mercedes-benz.com/as/authorization.oauth2',
            token_service='https://id.mercedes-benz.com/as/token.oauth2',
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri=redirect_uri,
            scopes=scopes
        )

        return provider

    # endregion
    # region Client Methods
    async def get_resources_for_container_id_using_ge_t(self, vehicle_id: str, access_token: str) -> List[FuelStatus]:
        """
        Returns all resources for the provided 'fuelstatus', data can be filtered for a certain time
        range.
        
        Arguments:
            vehicle_id: `str`.
                **REQUIRED.** Vehicle identification number
        
        Returns:
            `List[FuelStatus]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json \
        (
            request = f'/vehicles/{vehicle_id}/containers/fuelstatus',
            expected_content_type = 'application/json;charset=utf-8',
            access_token=access_token,
            expected_codes = [ 200 ],
        )
        return resp
    
    async def get_all_resources_for_vin_using_ge_t(self, vehicle_id: str) -> List[ResourceMetaInfo]:
        """
        Returns all available resources for the provided vehicle identification number.
        
        Arguments:
            vehicle_id: `str`.
                **REQUIRED.** Vehicle identification number
        
        Returns:
            `List[ResourceMetaInfo]`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json(request=f'/vehicles/{vehicle_id}/resources', expected_content_type='application/json;charset=utf-8', expected_codes=[ 200 ])
        return resp
    
    async def get_latest_rangeliquid_using_ge_t(self, vehicle_id: str) -> GetLatestRangeliquidUsingGETResponse:
        """
        Returns the latest available range liquid level resource for the vehicle identification number.
        
        Arguments:
            vehicle_id: `str`.
                **REQUIRED.** Vehicle identification number
        
        Returns:
            `GetLatestRangeliquidUsingGETResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/vehicles/{vehicle_id}/resources/rangeliquid',
            model = GetLatestRangeliquidUsingGETResponse,
            expected_content_type = 'application/json',
            expected_codes = [ 200 ],
        )
        return resp
    
    async def get_latest_tank_level_using_ge_t(self, vehicle_id: str) -> GetLatestTankLevelUsingGETResponse:
        """
        Returns the latest available tank level resource for the vehicle identification number.
        
        Arguments:
            vehicle_id: `str`.
                **REQUIRED.** Vehicle identification number
        
        Returns:
            `GetLatestTankLevelUsingGETResponse`. OK
        
        Generated by Python OpenAPI Parser
        """
        
        _, resp = await self.fetch_json_model \
        (
            request = f'/vehicles/{vehicle_id}/resources/tanklevelpercent',
            model = GetLatestTankLevelUsingGETResponse,
            expected_content_type = 'application/json;charset=utf-8',
            expected_codes = [ 200 ],
        )
        return resp
    
    # endregion
    

__all__ = \
[
    'FuelStatusApiClient',
    'FuelStatusApiClientServers',
]
