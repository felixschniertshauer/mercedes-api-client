"""
Fuel Status API v2.0

This API allows to determine the fuel level and remaining distance of connected Mercedes-Benz
vehicles remotely.

Data is categorized into resources and containers for the polling interface. They are defined
as follows:

* *Resource*: A resource is a single information about a vehicle. It's a measurement that
consists of a name (also referred to as resource ID), a value, and an associated timestamp. See
below for a list and description of all resources that this API provides.

* *Container*: A container is a set of resources that are defined to group data for a certain
use case.

The interface is a ISO 20078-compliant REST endpoint to query the latest data for a vehicle. If
the vehicle did not send an update for a resource within 12 hours, the response will be empty.

## Resources

This is an alphabetical list of all resources that the API provides.

Name | Description | Unit/Range

---- | ----------- | ----------

rangeliquid | Liquid fuel tank range | 0..2046 km

tanklevelpercent | Liquid fuel tank level | 0â€¦100 %

 - Contacts:
     - Name: The open API platform by Mercedes-Benz

Generated by Python OpenAPI Parser v0.2.4
"""

from .client import *

from collections import namedtuple

__title__ = 'FuelStatus'
__author__ = 'openapi-parser-0.2.4'
__license__ = 'Unlicensed'
__copyright__ = 'Copyright 2020 Felix Schniertshauer'
__version__ = '2.0.0'

VersionInfo = namedtuple('VersionInfo', 'major minor micro releaselevel serial')
version_info = VersionInfo(*__version__.split('.'), releaselevel='alpha', serial=0)

__all__ = \
[
    'version_info',
    '__title__',
    '__author__',
    '__license__',
    '__copyright__',
    '__version__',
]
__pdoc__ = { }
__pdoc_extras__ = [ ]

_submodules = \
[
    client,
]

for _submodule in _submodules:
    _submodule_name = _submodule.__name__.partition(f'{__name__}.')[-1]
    __all__.extend(_submodule.__all__)
    __pdoc__[_submodule_name] = True
    _submodule.__pdoc__ = getattr(_submodule, '__pdoc__', dict())
    _extras = getattr(_submodule, '__pdoc_extras__', list())
    for _element in _submodule.__all__:
        __pdoc__[_element] = _element in _extras

